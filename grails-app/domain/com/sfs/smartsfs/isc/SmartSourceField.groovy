package com.sfs.smartsfs.iscimport com.sfs.smartsfs.audit.AuditStamp
@AuditStampclass SmartSourceField implements Comparable{
	String name
	String type
	String title
	Integer fieldPosition
	Boolean primaryKey
	Boolean required

	Boolean propertiesOnly
	Boolean autoGenerated
	Boolean canEdit
	Boolean canFilter
	Boolean canSave
	Boolean detail
	Boolean canFocus //focusable form field

	String editorType //FormItem className
	String readOnlyEditorType

	String editRequiresRole
	String updateRequiresRole
	String viewRequiresRole

	String foreignKey
	String foreignDisplayField
	String displayField //another field in this DataSource that should be used as the display value for this field
	String valueField
	String includeFrom //declare an includeFrom field that is hidden, but is used as the displayField for the foreign key field:
	String includeVia //For a field that uses DataSourceField.includeFrom, specifies which foreignKey field should be used to find records in the related DataSource.

	Boolean hidden

	String rootValue

	Integer decimalPad //minimum number of digits shown after the decimal point.
	Integer decimalPrecision
	Integer length

	String validators
	String validOperators

	String valueXPath

	String optionDataSource
	String valueMap //custom value map pre combo
	String  characterCasing //prevod vstupu na upper/lower
	String mask //textItem.mask
	
	Boolean multiple //fieldItem one-to-many
	String multipleStorage //"json"

	String prompt //help text hoover
	
	String formItemProps
	SmartSource dSource
	String _test
	static transients = ['_test']	
	static belongsTo=[dSource:SmartSource]

	static mapping ={
		table 'SC_DSFIELD'		id generator:'native',params:[sequence:'SC_DSFIELD_SEQ']
		dSource column:'XDATASOURCE',fetch:'join',index:"SC_DSFIELD_DS_FK"
	}

	static constraints = {
		name nullable:false		dSource nullable:false
		fieldPosition nullable:false		formItemProps maxSize:2000		valueMap maxSize:1000
	}


	@Override
	public int compareTo(Object o) {
		this.fieldPosition.compareTo(o.fieldPosition);
	}

	def afterLoad(){		_test = id + " - " + name	}

}
